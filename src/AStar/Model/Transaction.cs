/* 
 * Bitcoin API
 *
 * Blockchain Facilities
 *
 * OpenAPI spec version: 2.0.0
 * Contact: contato@astarlabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace AStar.Model
{
    /// <summary>
    /// Transaction
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="ID">API register creation date..</param>
        /// <param name="Creationdate">API register creation date..</param>
        /// <param name="Confirmationdate">first confirmation date..</param>
        /// <param name="Blockchaincreationdate">blockchain creation date..</param>
        /// <param name="Txid">hash ID of blockchain transaction..</param>
        /// <param name="Amount">amount sended, 0 if OP_RETURN..</param>
        /// <param name="Fee">fee spended in the blockchain transaction..</param>
        /// <param name="Txsize">tx size..</param>
        /// <param name="Txhex">tx hexadecimal..</param>
        /// <param name="Data">file or string hash or address.</param>
        /// <param name="Feepriority">account fee priority.</param>
        /// <param name="Confirmations">actual transaction confirmations count.</param>
        /// <param name="Errormessage">error message in case of errors.</param>
        /// <param name="Coin">coin.</param>
        /// <param name="Test">test.</param>
        public Transaction(int? ID = default(int?), DateTime? Creationdate = default(DateTime?), DateTime? Confirmationdate = default(DateTime?), DateTime? Blockchaincreationdate = default(DateTime?), string Txid = default(string), float? Amount = default(float?), float? Fee = default(float?), int? Txsize = default(int?), string Txhex = default(string), string Data = default(string), int? Feepriority = default(int?), int? Confirmations = default(int?), string Errormessage = default(string), string Coin = default(string), int? Test = default(int?))
        {
            this.ID = ID;
            this.Creationdate = Creationdate;
            this.Confirmationdate = Confirmationdate;
            this.Blockchaincreationdate = Blockchaincreationdate;
            this.Txid = Txid;
            this.Amount = Amount;
            this.Fee = Fee;
            this.Txsize = Txsize;
            this.Txhex = Txhex;
            this.Data = Data;
            this.Feepriority = Feepriority;
            this.Confirmations = Confirmations;
            this.Errormessage = Errormessage;
            this.Coin = Coin;
            this.Test = Test;
        }
        
        /// <summary>
        /// API register id.
        /// </summary>
        /// <value>API register id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? ID { get; set; }

        /// <summary>
        /// API register creation date.
        /// </summary>
        /// <value>API register creation date.</value>
        [DataMember(Name="creationdate", EmitDefaultValue=false)]
        public DateTime? Creationdate { get; set; }
        /// <summary>
        /// first confirmation date.
        /// </summary>
        /// <value>first confirmation date.</value>
        [DataMember(Name="confirmationdate", EmitDefaultValue=false)]
        public DateTime? Confirmationdate { get; set; }
        /// <summary>
        /// blockchain creation date.
        /// </summary>
        /// <value>blockchain creation date.</value>
        [DataMember(Name="blockchaincreationdate", EmitDefaultValue=false)]
        public DateTime? Blockchaincreationdate { get; set; }
        /// <summary>
        /// hash ID of blockchain transaction.
        /// </summary>
        /// <value>hash ID of blockchain transaction.</value>
        [DataMember(Name="txid", EmitDefaultValue=false)]
        public string Txid { get; set; }
        /// <summary>
        /// amount sended, 0 if OP_RETURN.
        /// </summary>
        /// <value>amount sended, 0 if OP_RETURN.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public float? Amount { get; set; }
        /// <summary>
        /// fee spended in the blockchain transaction.
        /// </summary>
        /// <value>fee spended in the blockchain transaction.</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public float? Fee { get; set; }
        /// <summary>
        /// tx size.
        /// </summary>
        /// <value>tx size.</value>
        [DataMember(Name="txsize", EmitDefaultValue=false)]
        public int? Txsize { get; set; }
        /// <summary>
        /// tx hexadecimal.
        /// </summary>
        /// <value>tx hexadecimal.</value>
        [DataMember(Name="txhex", EmitDefaultValue=false)]
        public string Txhex { get; set; }
        /// <summary>
        /// file or string hash or address
        /// </summary>
        /// <value>file or string hash or address</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }
        /// <summary>
        /// account fee priority
        /// </summary>
        /// <value>account fee priority</value>
        [DataMember(Name="feepriority", EmitDefaultValue=false)]
        public int? Feepriority { get; set; }
        /// <summary>
        /// actual transaction confirmations count
        /// </summary>
        /// <value>actual transaction confirmations count</value>
        [DataMember(Name="confirmations", EmitDefaultValue=false)]
        public int? Confirmations { get; set; }
        /// <summary>
        /// error message in case of errors
        /// </summary>
        /// <value>error message in case of errors</value>
        [DataMember(Name="errormessage", EmitDefaultValue=false)]
        public string Errormessage { get; set; }
        /// <summary>
        /// coin
        /// </summary>
        /// <value>coin</value>
        [DataMember(Name="coin", EmitDefaultValue=false)]
        public string Coin { get; set; }
        /// <summary>
        /// test
        /// </summary>
        /// <value>test</value>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public int? Test { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  Creationdate: ").Append(Creationdate).Append("\n");
            sb.Append("  Confirmationdate: ").Append(Confirmationdate).Append("\n");
            sb.Append("  Blockchaincreationdate: ").Append(Blockchaincreationdate).Append("\n");
            sb.Append("  Txid: ").Append(Txid).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Txsize: ").Append(Txsize).Append("\n");
            sb.Append("  Txhex: ").Append(Txhex).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Feepriority: ").Append(Feepriority).Append("\n");
            sb.Append("  Confirmations: ").Append(Confirmations).Append("\n");
            sb.Append("  Errormessage: ").Append(Errormessage).Append("\n");
            sb.Append("  Coin: ").Append(Coin).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="other">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Creationdate == other.Creationdate ||
                    this.Creationdate != null &&
                    this.Creationdate.Equals(other.Creationdate)
                ) && 
                (
                    this.Confirmationdate == other.Confirmationdate ||
                    this.Confirmationdate != null &&
                    this.Confirmationdate.Equals(other.Confirmationdate)
                ) && 
                (
                    this.Blockchaincreationdate == other.Blockchaincreationdate ||
                    this.Blockchaincreationdate != null &&
                    this.Blockchaincreationdate.Equals(other.Blockchaincreationdate)
                ) && 
                (
                    this.Txid == other.Txid ||
                    this.Txid != null &&
                    this.Txid.Equals(other.Txid)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Fee == other.Fee ||
                    this.Fee != null &&
                    this.Fee.Equals(other.Fee)
                ) && 
                (
                    this.Txsize == other.Txsize ||
                    this.Txsize != null &&
                    this.Txsize.Equals(other.Txsize)
                ) && 
                (
                    this.Txhex == other.Txhex ||
                    this.Txhex != null &&
                    this.Txhex.Equals(other.Txhex)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.Feepriority == other.Feepriority ||
                    this.Feepriority != null &&
                    this.Feepriority.Equals(other.Feepriority)
                ) && 
                (
                    this.Confirmations == other.Confirmations ||
                    this.Confirmations != null &&
                    this.Confirmations.Equals(other.Confirmations)
                ) && 
                (
                    this.Errormessage == other.Errormessage ||
                    this.Errormessage != null &&
                    this.Errormessage.Equals(other.Errormessage)
                ) && 
                (
                    this.Coin == other.Coin ||
                    this.Coin != null &&
                    this.Coin.Equals(other.Coin)
                ) && 
                (
                    this.Test == other.Test ||
                    this.Test != null &&
                    this.Test.Equals(other.Test)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Creationdate != null)
                    hash = hash * 59 + this.Creationdate.GetHashCode();
                if (this.Confirmationdate != null)
                    hash = hash * 59 + this.Confirmationdate.GetHashCode();
                if (this.Blockchaincreationdate != null)
                    hash = hash * 59 + this.Blockchaincreationdate.GetHashCode();
                if (this.Txid != null)
                    hash = hash * 59 + this.Txid.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Fee != null)
                    hash = hash * 59 + this.Fee.GetHashCode();
                if (this.Txsize != null)
                    hash = hash * 59 + this.Txsize.GetHashCode();
                if (this.Txhex != null)
                    hash = hash * 59 + this.Txhex.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.Feepriority != null)
                    hash = hash * 59 + this.Feepriority.GetHashCode();
                if (this.Confirmations != null)
                    hash = hash * 59 + this.Confirmations.GetHashCode();
                if (this.Errormessage != null)
                    hash = hash * 59 + this.Errormessage.GetHashCode();
                if (this.Coin != null)
                    hash = hash * 59 + this.Coin.GetHashCode();
                if (this.Test != null)
                    hash = hash * 59 + this.Test.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
