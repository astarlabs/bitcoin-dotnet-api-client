/* 
 * Bitcoin API
 *
 * Blockchain Facilities
 *
 * OpenAPI spec version: 2.0.0
 * Contact: contato@astarlabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AStar.Client;
using AStar.Model;

namespace AStar.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send file hash to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a base64 encoded file and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="base64">base64 encoded file.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>SingleResult</returns>
        SingleResult SendFile (string token, int? account, string user, string pass, string base64, string coin, int? test);

        /// <summary>
        /// Send file hash to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a base64 encoded file and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="base64">base64 encoded file.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>ApiResponse of SingleResult</returns>
        ApiResponse<SingleResult> SendFileWithHttpInfo (string token, int? account, string user, string pass, string base64, string coin, int? test);
        /// <summary>
        /// Send hash to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a hash and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>SingleResult</returns>
        SingleResult SendHash (string token, int? account, string user, string pass, string hash, string coin, int? test);

        /// <summary>
        /// Send hash to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a hash and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>ApiResponse of SingleResult</returns>
        ApiResponse<SingleResult> SendHashWithHttpInfo (string token, int? account, string user, string pass, string hash, string coin, int? test);
        /// <summary>
        /// Send a value for address
        /// </summary>
        /// <remarks>
        /// Send a value for address by an blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="address">Address to send the amount.</param>
        /// <param name="amount">Amount to send</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>SingleResult</returns>
        SingleResult SendPayAddress (string token, int? account, string user, string pass, string address, float? amount, string coin, int? test);

        /// <summary>
        /// Send a value for address
        /// </summary>
        /// <remarks>
        /// Send a value for address by an blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="address">Address to send the amount.</param>
        /// <param name="amount">Amount to send</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>ApiResponse of SingleResult</returns>
        ApiResponse<SingleResult> SendPayAddressWithHttpInfo (string token, int? account, string user, string pass, string address, float? amount, string coin, int? test);
        /// <summary>
        /// Send string to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a string and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="_string">string to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>SingleResult</returns>
        SingleResult SendString (string token, int? account, string user, string pass, string _string, string coin, int? test);

        /// <summary>
        /// Send string to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a string and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="_string">string to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>ApiResponse of SingleResult</returns>
        ApiResponse<SingleResult> SendStringWithHttpInfo (string token, int? account, string user, string pass, string _string, string coin, int? test);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send file hash to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a base64 encoded file and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="base64">base64 encoded file.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of SingleResult</returns>
        System.Threading.Tasks.Task<SingleResult> SendFileAsync (string token, int? account, string user, string pass, string base64, string coin, int? test);

        /// <summary>
        /// Send file hash to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a base64 encoded file and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="base64">base64 encoded file.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of ApiResponse (SingleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleResult>> SendFileAsyncWithHttpInfo (string token, int? account, string user, string pass, string base64, string coin, int? test);
        /// <summary>
        /// Send hash to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a hash and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of SingleResult</returns>
        System.Threading.Tasks.Task<SingleResult> SendHashAsync (string token, int? account, string user, string pass, string hash, string coin, int? test);

        /// <summary>
        /// Send hash to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a hash and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of ApiResponse (SingleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleResult>> SendHashAsyncWithHttpInfo (string token, int? account, string user, string pass, string hash, string coin, int? test);
        /// <summary>
        /// Send a value for address
        /// </summary>
        /// <remarks>
        /// Send a value for address by an blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="address">Address to send the amount.</param>
        /// <param name="amount">Amount to send</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of SingleResult</returns>
        System.Threading.Tasks.Task<SingleResult> SendPayAddressAsync (string token, int? account, string user, string pass, string address, float? amount, string coin, int? test);

        /// <summary>
        /// Send a value for address
        /// </summary>
        /// <remarks>
        /// Send a value for address by an blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="address">Address to send the amount.</param>
        /// <param name="amount">Amount to send</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of ApiResponse (SingleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleResult>> SendPayAddressAsyncWithHttpInfo (string token, int? account, string user, string pass, string address, float? amount, string coin, int? test);
        /// <summary>
        /// Send string to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a string and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="_string">string to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of SingleResult</returns>
        System.Threading.Tasks.Task<SingleResult> SendStringAsync (string token, int? account, string user, string pass, string _string, string coin, int? test);

        /// <summary>
        /// Send string to bitcoin blockchain
        /// </summary>
        /// <remarks>
        /// Send an OP_RETURN transaction with a string and return the API id for the blockchain transaction. 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="_string">string to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of ApiResponse (SingleResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleResult>> SendStringAsyncWithHttpInfo (string token, int? account, string user, string pass, string _string, string coin, int? test);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SendApi : ISendApi
    {
        private AStar.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SendApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = AStar.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SendApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AStar.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AStar.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send file hash to bitcoin blockchain Send an OP_RETURN transaction with a base64 encoded file and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="base64">base64 encoded file.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>SingleResult</returns>
        public SingleResult SendFile (string token, int? account, string user, string pass, string base64, string coin, int? test)
        {
             ApiResponse<SingleResult> localVarResponse = SendFileWithHttpInfo(token, account, user, pass, base64, coin, test);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send file hash to bitcoin blockchain Send an OP_RETURN transaction with a base64 encoded file and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="base64">base64 encoded file.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>ApiResponse of SingleResult</returns>
        public ApiResponse< SingleResult > SendFileWithHttpInfo (string token, int? account, string user, string pass, string base64, string coin, int? test)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SendApi->SendFile");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SendApi->SendFile");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SendApi->SendFile");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SendApi->SendFile");
            // verify the required parameter 'base64' is set
            if (base64 == null)
                throw new ApiException(400, "Missing required parameter 'base64' when calling SendApi->SendFile");
            // verify the required parameter 'coin' is set
            if (coin == null)
                throw new ApiException(400, "Missing required parameter 'coin' when calling SendApi->SendFile");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SendApi->SendFile");

            var localVarPath = "/send/opreturn/base64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (base64 != null) localVarFormParams.Add("base64", Configuration.ApiClient.ParameterToString(base64)); // form parameter
            if (coin != null) localVarFormParams.Add("coin", Configuration.ApiClient.ParameterToString(coin)); // form parameter
            if (test != null) localVarFormParams.Add("test", Configuration.ApiClient.ParameterToString(test)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleResult)));
        }

        /// <summary>
        /// Send file hash to bitcoin blockchain Send an OP_RETURN transaction with a base64 encoded file and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="base64">base64 encoded file.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of SingleResult</returns>
        public async System.Threading.Tasks.Task<SingleResult> SendFileAsync (string token, int? account, string user, string pass, string base64, string coin, int? test)
        {
             ApiResponse<SingleResult> localVarResponse = await SendFileAsyncWithHttpInfo(token, account, user, pass, base64, coin, test);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send file hash to bitcoin blockchain Send an OP_RETURN transaction with a base64 encoded file and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="base64">base64 encoded file.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of ApiResponse (SingleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleResult>> SendFileAsyncWithHttpInfo (string token, int? account, string user, string pass, string base64, string coin, int? test)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SendApi->SendFile");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SendApi->SendFile");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SendApi->SendFile");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SendApi->SendFile");
            // verify the required parameter 'base64' is set
            if (base64 == null)
                throw new ApiException(400, "Missing required parameter 'base64' when calling SendApi->SendFile");
            // verify the required parameter 'coin' is set
            if (coin == null)
                throw new ApiException(400, "Missing required parameter 'coin' when calling SendApi->SendFile");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SendApi->SendFile");

            var localVarPath = "/send/opreturn/base64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (base64 != null) localVarFormParams.Add("base64", Configuration.ApiClient.ParameterToString(base64)); // form parameter
            if (coin != null) localVarFormParams.Add("coin", Configuration.ApiClient.ParameterToString(coin)); // form parameter
            if (test != null) localVarFormParams.Add("test", Configuration.ApiClient.ParameterToString(test)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleResult)));
        }

        /// <summary>
        /// Send hash to bitcoin blockchain Send an OP_RETURN transaction with a hash and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>SingleResult</returns>
        public SingleResult SendHash (string token, int? account, string user, string pass, string hash, string coin, int? test)
        {
             ApiResponse<SingleResult> localVarResponse = SendHashWithHttpInfo(token, account, user, pass, hash, coin, test);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send hash to bitcoin blockchain Send an OP_RETURN transaction with a hash and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>ApiResponse of SingleResult</returns>
        public ApiResponse< SingleResult > SendHashWithHttpInfo (string token, int? account, string user, string pass, string hash, string coin, int? test)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SendApi->SendHash");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SendApi->SendHash");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SendApi->SendHash");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SendApi->SendHash");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling SendApi->SendHash");
            // verify the required parameter 'coin' is set
            if (coin == null)
                throw new ApiException(400, "Missing required parameter 'coin' when calling SendApi->SendHash");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SendApi->SendHash");

            var localVarPath = "/send/opreturn/hash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (hash != null) localVarFormParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // form parameter
            if (coin != null) localVarFormParams.Add("coin", Configuration.ApiClient.ParameterToString(coin)); // form parameter
            if (test != null) localVarFormParams.Add("test", Configuration.ApiClient.ParameterToString(test)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleResult)));
        }

        /// <summary>
        /// Send hash to bitcoin blockchain Send an OP_RETURN transaction with a hash and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of SingleResult</returns>
        public async System.Threading.Tasks.Task<SingleResult> SendHashAsync (string token, int? account, string user, string pass, string hash, string coin, int? test)
        {
             ApiResponse<SingleResult> localVarResponse = await SendHashAsyncWithHttpInfo(token, account, user, pass, hash, coin, test);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send hash to bitcoin blockchain Send an OP_RETURN transaction with a hash and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of ApiResponse (SingleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleResult>> SendHashAsyncWithHttpInfo (string token, int? account, string user, string pass, string hash, string coin, int? test)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SendApi->SendHash");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SendApi->SendHash");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SendApi->SendHash");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SendApi->SendHash");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling SendApi->SendHash");
            // verify the required parameter 'coin' is set
            if (coin == null)
                throw new ApiException(400, "Missing required parameter 'coin' when calling SendApi->SendHash");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SendApi->SendHash");

            var localVarPath = "/send/opreturn/hash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (hash != null) localVarFormParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // form parameter
            if (coin != null) localVarFormParams.Add("coin", Configuration.ApiClient.ParameterToString(coin)); // form parameter
            if (test != null) localVarFormParams.Add("test", Configuration.ApiClient.ParameterToString(test)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleResult)));
        }

        /// <summary>
        /// Send a value for address Send a value for address by an blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="address">Address to send the amount.</param>
        /// <param name="amount">Amount to send</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>SingleResult</returns>
        public SingleResult SendPayAddress (string token, int? account, string user, string pass, string address, float? amount, string coin, int? test)
        {
             ApiResponse<SingleResult> localVarResponse = SendPayAddressWithHttpInfo(token, account, user, pass, address, amount, coin, test);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a value for address Send a value for address by an blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="address">Address to send the amount.</param>
        /// <param name="amount">Amount to send</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>ApiResponse of SingleResult</returns>
        public ApiResponse< SingleResult > SendPayAddressWithHttpInfo (string token, int? account, string user, string pass, string address, float? amount, string coin, int? test)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SendApi->SendPayAddress");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SendApi->SendPayAddress");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SendApi->SendPayAddress");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SendApi->SendPayAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling SendApi->SendPayAddress");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling SendApi->SendPayAddress");
            // verify the required parameter 'coin' is set
            if (coin == null)
                throw new ApiException(400, "Missing required parameter 'coin' when calling SendApi->SendPayAddress");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SendApi->SendPayAddress");

            var localVarPath = "/send/payaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (coin != null) localVarFormParams.Add("coin", Configuration.ApiClient.ParameterToString(coin)); // form parameter
            if (test != null) localVarFormParams.Add("test", Configuration.ApiClient.ParameterToString(test)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPayAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleResult)));
        }

        /// <summary>
        /// Send a value for address Send a value for address by an blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="address">Address to send the amount.</param>
        /// <param name="amount">Amount to send</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of SingleResult</returns>
        public async System.Threading.Tasks.Task<SingleResult> SendPayAddressAsync (string token, int? account, string user, string pass, string address, float? amount, string coin, int? test)
        {
             ApiResponse<SingleResult> localVarResponse = await SendPayAddressAsyncWithHttpInfo(token, account, user, pass, address, amount, coin, test);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a value for address Send a value for address by an blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="address">Address to send the amount.</param>
        /// <param name="amount">Amount to send</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of ApiResponse (SingleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleResult>> SendPayAddressAsyncWithHttpInfo (string token, int? account, string user, string pass, string address, float? amount, string coin, int? test)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SendApi->SendPayAddress");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SendApi->SendPayAddress");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SendApi->SendPayAddress");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SendApi->SendPayAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling SendApi->SendPayAddress");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling SendApi->SendPayAddress");
            // verify the required parameter 'coin' is set
            if (coin == null)
                throw new ApiException(400, "Missing required parameter 'coin' when calling SendApi->SendPayAddress");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SendApi->SendPayAddress");

            var localVarPath = "/send/payaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (coin != null) localVarFormParams.Add("coin", Configuration.ApiClient.ParameterToString(coin)); // form parameter
            if (test != null) localVarFormParams.Add("test", Configuration.ApiClient.ParameterToString(test)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPayAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleResult)));
        }

        /// <summary>
        /// Send string to bitcoin blockchain Send an OP_RETURN transaction with a string and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="_string">string to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>SingleResult</returns>
        public SingleResult SendString (string token, int? account, string user, string pass, string _string, string coin, int? test)
        {
             ApiResponse<SingleResult> localVarResponse = SendStringWithHttpInfo(token, account, user, pass, _string, coin, test);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send string to bitcoin blockchain Send an OP_RETURN transaction with a string and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="_string">string to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>ApiResponse of SingleResult</returns>
        public ApiResponse< SingleResult > SendStringWithHttpInfo (string token, int? account, string user, string pass, string _string, string coin, int? test)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SendApi->SendString");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SendApi->SendString");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SendApi->SendString");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SendApi->SendString");
            // verify the required parameter '_string' is set
            if (_string == null)
                throw new ApiException(400, "Missing required parameter '_string' when calling SendApi->SendString");
            // verify the required parameter 'coin' is set
            if (coin == null)
                throw new ApiException(400, "Missing required parameter 'coin' when calling SendApi->SendString");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SendApi->SendString");

            var localVarPath = "/send/opreturn/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (_string != null) localVarFormParams.Add("string", Configuration.ApiClient.ParameterToString(_string)); // form parameter
            if (coin != null) localVarFormParams.Add("coin", Configuration.ApiClient.ParameterToString(coin)); // form parameter
            if (test != null) localVarFormParams.Add("test", Configuration.ApiClient.ParameterToString(test)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleResult)));
        }

        /// <summary>
        /// Send string to bitcoin blockchain Send an OP_RETURN transaction with a string and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="_string">string to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of SingleResult</returns>
        public async System.Threading.Tasks.Task<SingleResult> SendStringAsync (string token, int? account, string user, string pass, string _string, string coin, int? test)
        {
             ApiResponse<SingleResult> localVarResponse = await SendStringAsyncWithHttpInfo(token, account, user, pass, _string, coin, test);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send string to bitcoin blockchain Send an OP_RETURN transaction with a string and return the API id for the blockchain transaction. 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="_string">string to send.</param>
        /// <param name="coin">the coin name - bitcoin/litecoin.</param>
        /// <param name="test">if test &#x3D; 1 so use testnet else test &#x3D; 0 for mainnet.</param>
        /// <returns>Task of ApiResponse (SingleResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleResult>> SendStringAsyncWithHttpInfo (string token, int? account, string user, string pass, string _string, string coin, int? test)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SendApi->SendString");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SendApi->SendString");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SendApi->SendString");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SendApi->SendString");
            // verify the required parameter '_string' is set
            if (_string == null)
                throw new ApiException(400, "Missing required parameter '_string' when calling SendApi->SendString");
            // verify the required parameter 'coin' is set
            if (coin == null)
                throw new ApiException(400, "Missing required parameter 'coin' when calling SendApi->SendString");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SendApi->SendString");

            var localVarPath = "/send/opreturn/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (_string != null) localVarFormParams.Add("string", Configuration.ApiClient.ParameterToString(_string)); // form parameter
            if (coin != null) localVarFormParams.Add("coin", Configuration.ApiClient.ParameterToString(coin)); // form parameter
            if (test != null) localVarFormParams.Add("test", Configuration.ApiClient.ParameterToString(test)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleResult)));
        }

    }
}
