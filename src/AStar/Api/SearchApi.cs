/* 
 * Bitcoin API
 *
 * Blockchain Facilities
 *
 * OpenAPI spec version: 2.0.0
 * Contact: contato@astarlabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AStar.Client;
using AStar.Model;

namespace AStar.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get transaction informations by API ID
        /// </summary>
        /// <remarks>
        /// Get transaction informations by API ID 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="id">API id for blockchain transaction</param>
        /// <returns>Transaction</returns>
        Transaction SearchByAPIID (string token, int? account, string user, string pass, int? id);

        /// <summary>
        /// Get transaction informations by API ID
        /// </summary>
        /// <remarks>
        /// Get transaction informations by API ID 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="id">API id for blockchain transaction</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> SearchByAPIIDWithHttpInfo (string token, int? account, string user, string pass, int? id);
        /// <summary>
        /// Get transaction informations by file or string content
        /// </summary>
        /// <remarks>
        /// Get transaction informations by file or string content 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="content">file or string content.</param>
        /// <returns>Transaction</returns>
        Transaction SearchByContent (string token, int? account, string user, string pass, string content);

        /// <summary>
        /// Get transaction informations by file or string content
        /// </summary>
        /// <remarks>
        /// Get transaction informations by file or string content 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="content">file or string content.</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> SearchByContentWithHttpInfo (string token, int? account, string user, string pass, string content);
        /// <summary>
        /// Get transaction informations by file or string hash
        /// </summary>
        /// <remarks>
        /// Get transaction informations by file or string hash 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash of content.</param>
        /// <returns>Transaction</returns>
        Transaction[] SearchByHash (string token, int? account, string user, string pass, string hash);

        /// <summary>
        /// Get transaction informations by file or string hash
        /// </summary>
        /// <remarks>
        /// Get transaction informations by file or string hash 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash of content.</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction[]> SearchByHashWithHttpInfo (string token, int? account, string user, string pass, string hash);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get transaction informations by API ID
        /// </summary>
        /// <remarks>
        /// Get transaction informations by API ID 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="id">API id for blockchain transaction</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> SearchByAPIIDAsync (string token, int? account, string user, string pass, int? id);

        /// <summary>
        /// Get transaction informations by API ID
        /// </summary>
        /// <remarks>
        /// Get transaction informations by API ID 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="id">API id for blockchain transaction</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> SearchByAPIIDAsyncWithHttpInfo (string token, int? account, string user, string pass, int? id);
        /// <summary>
        /// Get transaction informations by file or string content
        /// </summary>
        /// <remarks>
        /// Get transaction informations by file or string content 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="content">file or string content.</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> SearchByContentAsync (string token, int? account, string user, string pass, string content);

        /// <summary>
        /// Get transaction informations by file or string content
        /// </summary>
        /// <remarks>
        /// Get transaction informations by file or string content 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="content">file or string content.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> SearchByContentAsyncWithHttpInfo (string token, int? account, string user, string pass, string content);
        /// <summary>
        /// Get transaction informations by file or string hash
        /// </summary>
        /// <remarks>
        /// Get transaction informations by file or string hash 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash of content.</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> SearchByHashAsync (string token, int? account, string user, string pass, string hash);

        /// <summary>
        /// Get transaction informations by file or string hash
        /// </summary>
        /// <remarks>
        /// Get transaction informations by file or string hash 
        /// </remarks>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash of content.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> SearchByHashAsyncWithHttpInfo (string token, int? account, string user, string pass, string hash);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private AStar.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = AStar.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Configuration configuration = null)
        {

            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AStar.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AStar.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get transaction informations by API ID Get transaction informations by API ID 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="id">API id for blockchain transaction</param>
        /// <returns>Transaction</returns>
        public Transaction SearchByAPIID (string token, int? account, string user, string pass, int? id)
        {
             ApiResponse<Transaction> localVarResponse = SearchByAPIIDWithHttpInfo(token, account, user, pass, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction informations by API ID Get transaction informations by API ID 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="id">API id for blockchain transaction</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > SearchByAPIIDWithHttpInfo (string token, int? account, string user, string pass, int? id)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SearchApi->SearchByAPIID");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SearchApi->SearchByAPIID");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SearchApi->SearchByAPIID");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SearchApi->SearchByAPIID");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SearchApi->SearchByAPIID");

            var localVarPath = "/search/registered/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };

            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (id != null) localVarFormParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // form parameter


            // make the HTTP request    
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            Console.WriteLine(localVarResponse.Content);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchByAPIID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Get transaction informations by API ID Get transaction informations by API ID 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="id">API id for blockchain transaction</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> SearchByAPIIDAsync (string token, int? account, string user, string pass, int? id)
        {
             ApiResponse<Transaction> localVarResponse = await SearchByAPIIDAsyncWithHttpInfo(token, account, user, pass, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction informations by API ID Get transaction informations by API ID 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="id">API id for blockchain transaction</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> SearchByAPIIDAsyncWithHttpInfo (string token, int? account, string user, string pass, int? id)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SearchApi->SearchByAPIID");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SearchApi->SearchByAPIID");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SearchApi->SearchByAPIID");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SearchApi->SearchByAPIID");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SearchApi->SearchByAPIID");

            var localVarPath = "/search/registered/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (id != null) localVarFormParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchByAPIID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Get transaction informations by file or string content Get transaction informations by file or string content 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="content">file or string content.</param>
        /// <returns>Transaction</returns>
        public Transaction SearchByContent (string token, int? account, string user, string pass, string content)
        {
             ApiResponse<Transaction> localVarResponse = SearchByContentWithHttpInfo(token, account, user, pass, content);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction informations by file or string content Get transaction informations by file or string content 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="content">file or string content.</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > SearchByContentWithHttpInfo (string token, int? account, string user, string pass, string content)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SearchApi->SearchByContent");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SearchApi->SearchByContent");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SearchApi->SearchByContent");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SearchApi->SearchByContent");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling SearchApi->SearchByContent");

            var localVarPath = "/search/registered/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (content != null) localVarFormParams.Add("content", Configuration.ApiClient.ParameterToString(content)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchByContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Get transaction informations by file or string content Get transaction informations by file or string content 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="content">file or string content.</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> SearchByContentAsync (string token, int? account, string user, string pass, string content)
        {
             ApiResponse<Transaction> localVarResponse = await SearchByContentAsyncWithHttpInfo(token, account, user, pass, content);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction informations by file or string content Get transaction informations by file or string content 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="content">file or string content.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> SearchByContentAsyncWithHttpInfo (string token, int? account, string user, string pass, string content)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SearchApi->SearchByContent");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SearchApi->SearchByContent");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SearchApi->SearchByContent");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SearchApi->SearchByContent");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling SearchApi->SearchByContent");

            var localVarPath = "/search/registered/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (content != null) localVarFormParams.Add("content", Configuration.ApiClient.ParameterToString(content)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchByContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Get transaction informations by file or string hash Get transaction informations by file or string hash 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash of content.</param>
        /// <returns>Transaction</returns>
        public Transaction[] SearchByHash (string token, int? account, string user, string pass, string hash)
        {
             ApiResponse<Transaction[]> localVarResponse = SearchByHashWithHttpInfo(token, account, user, pass, hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction informations by file or string hash Get transaction informations by file or string hash 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash of content.</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction[] > SearchByHashWithHttpInfo (string token, int? account, string user, string pass, string hash)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SearchApi->SearchByHash");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SearchApi->SearchByHash");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SearchApi->SearchByHash");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SearchApi->SearchByHash");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling SearchApi->SearchByHash");

            var localVarPath = "/search/registered/hash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (hash != null) localVarFormParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchByHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction[])));
        }

        /// <summary>
        /// Get transaction informations by file or string hash Get transaction informations by file or string hash 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash of content.</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> SearchByHashAsync (string token, int? account, string user, string pass, string hash)
        {
             ApiResponse<Transaction> localVarResponse = await SearchByHashAsyncWithHttpInfo(token, account, user, pass, hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction informations by file or string hash Get transaction informations by file or string hash 
        /// </summary>
        /// <exception cref="AStar.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">a signed JWT token with the company privatekey.</param>
        /// <param name="account">API ID for Account where the coins must be spend.</param>
        /// <param name="user">API user name.</param>
        /// <param name="pass">API user password.</param>
        /// <param name="hash">hash of content.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> SearchByHashAsyncWithHttpInfo (string token, int? account, string user, string pass, string hash)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling SearchApi->SearchByHash");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling SearchApi->SearchByHash");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling SearchApi->SearchByHash");
            // verify the required parameter 'pass' is set
            if (pass == null)
                throw new ApiException(400, "Missing required parameter 'pass' when calling SearchApi->SearchByHash");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling SearchApi->SearchByHash");

            var localVarPath = "/search/registered/hash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (account != null) localVarFormParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (pass != null) localVarFormParams.Add("pass", Configuration.ApiClient.ParameterToString(pass)); // form parameter
            if (hash != null) localVarFormParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchByHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

    }
}
