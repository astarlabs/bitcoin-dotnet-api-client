/* 
 * Bitcoin API
 *
 * Blockchain Facilities
 *
 * OpenAPI spec version: 2.0.0
 * Contact: contato@astarlabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using AStar.Client;
using AStar.Api;
using AStar.Model;

namespace AStar.Test
{
    /// <summary>
    ///  Class for testing SendApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SendApiTests
    {
        private SendApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SendApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SendApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SendApi
            //Assert.IsInstanceOfType(typeof(SendApi), instance, "instance is a SendApi");
        }

        
        /// <summary>
        /// Test SendFile
        /// </summary>
        [Test]
        public void SendFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? account = null;
            //string user = null;
            //string pass = null;
            //string base64 = null;
            //string coin = null;
            //int? test = null;
            //var response = instance.SendFile(token, account, user, pass, base64, coin, test);
            //Assert.IsInstanceOf<SingleResult> (response, "response is SingleResult");
        }
        
        /// <summary>
        /// Test SendHash
        /// </summary>
        [Test]
        public void SendHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? account = null;
            //string user = null;
            //string pass = null;
            //string hash = null;
            //string coin = null;
            //int? test = null;
            //var response = instance.SendHash(token, account, user, pass, hash, coin, test);
            //Assert.IsInstanceOf<SingleResult> (response, "response is SingleResult");
        }
        
        /// <summary>
        /// Test SendPayAddress
        /// </summary>
        [Test]
        public void SendPayAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? account = null;
            //string user = null;
            //string pass = null;
            //string address = null;
            //float? amount = null;
            //string coin = null;
            //int? test = null;
            //var response = instance.SendPayAddress(token, account, user, pass, address, amount, coin, test);
            //Assert.IsInstanceOf<SingleResult> (response, "response is SingleResult");
        }
        
        /// <summary>
        /// Test SendString
        /// </summary>
        [Test]
        public void SendStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? account = null;
            //string user = null;
            //string pass = null;
            //string _string = null;
            //string coin = null;
            //int? test = null;
            //var response = instance.SendString(token, account, user, pass, _string, coin, test);
            //Assert.IsInstanceOf<SingleResult> (response, "response is SingleResult");
        }
        
    }

}
