/* 
 * Bitcoin API
 *
 * Blockchain Facilities
 *
 * OpenAPI spec version: 2.0.0
 * Contact: contato@astarlabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using AStar.Client;
using AStar.Api;
using AStar.Model;
using AStar.Util;

namespace AStar.Test
{
    /// <summary>
    ///  Class for testing SearchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SearchApiTests
    {
        private SearchApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SearchApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SearchApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SearchApi
            //Assert.IsInstanceOfType(typeof(SearchApi), instance, "instance is a SearchApi");
        }

        
        /// <summary>
        /// Test SearchByAPIID
        /// </summary>
        [Test]
        public void SearchByAPIIDTest()
        {
            string token = Token.sign("2d2d2d2d2d424547494e205253412050524956415445204b45592d2d2d2d2d0a4d4949456f77494241414b4341514541724371725858653861385767615477384b583231434c433773454c5449474e6654413431386a6d7a68536f2b7a3949620a49304950502f6c767a4163544e61764b446c4c3955434b43546a4464654b354664306142496c6a686b5a3434736172394b76724a474e5233686b6c583737382f0a3979732f41573644532b5844574f754b3543766c525253647a686b79334d63626e5859684645722f474568694b4e5a6e4a36306b442b5168424b3633664a7a6e0a5774693237483734584e58426a617a6c6d62627036784e4b796369325a4c387943485266523071386c314f782f7079354f2f4a7a4241315779477641643949500a4c356844696d306e7a325172496162374b576939597a6a675a5455784f4c646c495a65546369553665765a72466a6872464652424a722f6a7642684b553041650a655a395971686e545a683949544e484e467a774f594273514835454c424572364d5533443251494441514142416f49424142594e7854504d34624d4164734c6b0a4e3253744f4b4a7257532b4437393248505337563579306e485172693158627a6d4178564b76547238396b7a307338654f567a4b587136454c534c732b5947360a2b53554651416478555476424138776d646857715746593436544b6e6448382b685767592f78496b344f6135414f514545422b595339386b652b3570706531490a4341364d6b6b49794e536b634a49374d6f4277682f717557636e425235306a5961464b416d4d6e4f704869742b5a776f666c5364556a2f654e7364426a5369720a32546e4357346b636f7a6b6e76335a463148516d315256314e7734636a344146616e434933576d692b42315873546c6f6478654d5a392f593566792f3868556a0a2f73714e4d6c7a7859373372574d6f7a43656c50324d34642f5679715479616252352f4239387a4d344e6a7673534e6d6d3767336d346e2b49577a694b4a6f490a64704c647a7a304367594541336e37716e504f426a6b745242366a654c74626379616c317733764c45422f66506a5465777238306447772b764f4b45307343660a72484a346c5261326b544e584c6e344f4b485138614f74374849536e384d57477833563055465158314a54546a344c6a62394259433543355a4a5451552b434e0a537a2f78742b784b626259786f52716b2f45385a7658716c4678544a312b336b5043423079316c546241507048435a2b612f4a723268634367594541786865590a64504976425042634d524556533964593546424335486737764c7a39792b727477343351544a4e68514456494755577831436a6168747465595463725a4537520a423849397766645751592f326d337331674a5171485268674e486c43316d62674d45625a6c7a37564f383037636844746b5844623173624d30413249336252570a7768504a476f6c736b756c3736366758646a6e4c67676f3858464c737077766676364c734e34384367594164352f3950453267426f567746354976677a64366c0a654a4b737350494e6538733943457738377768303861764a4a63566d73702b4478577378317669354d615a785346354d7a3772692b32767a33467a6166794a720a6f767a3859794645344c42444a50752f4a736a2b3350676562655a47722f4d742f7931565a48786f6e4d6d3039756a67525232586d326d66585a7233334445470a5a2f4a7139746e41746848615238354d5969786642774b4267416a4b4b7a326c4d576a717357794c38594834414433425166615a5479314578593479306e49470a374f4d343975752b6359434e6b794a79335a393252473354344e30476b6b666832704f737765734f31455a3535526e6265544c70546675474665306c693355590a373762435676766355334c775256706177365a3445385a336b30636a4a575a664d6d453344395a452f66617138722b514f504f414f4d56762b496842417143690a5068454a416f4742414e67737441547137644749616c4f7355446853686664667133564651456762596c4a793063355836624d635350666778335442795837510a77753552636a64533739676c564b674b3349785a61442b4d55784f496b51554e78784942673270624c6d6b425438345a75627348346258444d756e7a304758780a4c4a434675564a4657727a6c4c48514c7a442f48336a55326a7154686a4f727970686642526b716438555169627a5a346374506c0a2d2d2d2d2d454e44205253412050524956415445204b45592d2d2d2d2d0a");
            int account = 15;
            string user = "test";
            string pass = "test";
            int id = 333;
            var response = instance.SearchByAPIID(token, account, user, pass, id);
            Assert.IsInstanceOf<Transaction> (response, "response is Transaction");
        }
        
        /// <summary>
        /// Test SearchByContent
        /// </summary>
        [Test]
        public void SearchByContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? account = null;
            //string user = null;
            //string pass = null;
            //string content = null;
            //var response = instance.SearchByContent(token, account, user, pass, content);
            //Assert.IsInstanceOf<Transaction> (response, "response is Transaction");
        }
        
        /// <summary>
        /// Test SearchByHash
        /// </summary>
        [Test]
        public void SearchByHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? account = null;
            //string user = null;
            //string pass = null;
            //string hash = null;
            //var response = instance.SearchByHash(token, account, user, pass, hash);
            //Assert.IsInstanceOf<Transaction> (response, "response is Transaction");
        }
        
    }

}