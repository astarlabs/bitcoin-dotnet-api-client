/* 
 * Bitcoin API
 *
 * Blockchain Facilities
 *
 * OpenAPI spec version: 2.0.0
 * Contact: contato@astarlabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using AStar.Client;
using AStar.Api;
using AStar.Model;
using AStar.Util;

namespace AStar.Test
{
    /// <summary>
    ///  Class for testing SearchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SearchApiTests
    {
        private SearchApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SearchApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SearchApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SearchApi
            //Assert.IsInstanceOfType(typeof(SearchApi), instance, "instance is a SearchApi");
        }

        
        /// <summary>
        /// Test SearchByAPIID
        /// </summary>
        [Test]
        public void SearchByAPIIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            string token = Token.sign("2d2d2d2d2d424547494e205253412050524956415445204b45592d2d2d2d2d0a4d4949457041494241414b434151454132313466385a41674f53545473733351695a52466e672b654b5456744455427a65437146746b574f716f76786e4a47720a47513138726a4e32456e55697975327979584c753930725a6c516334673245737172535a7964436e372f6e774b4c666a2b6a5476706c334c5543733233432b580a50416c6550376d4c385342413569424874422f426c65475768592b4d3847396245746e526a352b4d375537703873687a696c6b5846574b313936774c765062330a46696765466c504b6b5a6d78534c64734a6467397769647a3474526236525a6e55304c38724b746b6b517374653676796a78344c584341636d65444d31574f330a57687a4730554b434272552f55596b6639305a73514e4530515851364672365358566650396b714e664a59564746554c745a554333385365793948426b2f49680a7937352b394957377a556f6f44694d66325a724b4542416b7472724564684779644e494b7451494441514142416f49424147696e6c52484873726651612f626e0a3363396c48336c7939662b753732486446376d436639776666787136505142334e6d747a566349393574795461592f717174735572424471637264346847755a0a567066794a56523036556e4273654f624a335a632f754164367a744b4170673156433965514d7169474c4e6d73632b59497430364d5437794b7239355a73486d0a506b7257412f5a444a68617043552b3864664c513467526633585255693542372f6c5254646378374a34617a3168416f6f6241344c554b4b565065774f7273720a30736d4671695a6547795276506a64564f635466513171734d672b564b4b39366d4d4248454b5a63794156313857754a617145744e596e4a333735703679314b0a4c6d524f476c2b4236374b6c494b597252675633723956684969654f6e686557657178376365556838564a32427648794d365956444a4763384438733867747a0a6568785176686b43675945412f43467a694972497851564a65343771736b38364a2b3947474b7553766f4d55687158616f66774774443344767a5a4e6d357a340a54743279574c74574864503039786a6c37644a56444d736c55306e38636b386a42625830752f525634583667785a314c6f696a3665783337336a6455754f505a0a6677346938725a6d457a6937523479415364316b4474736255764753566e48434d5434643036646d496a564d452b3055756a42566d574d4367594541337276310a4264594d4278747149344272742f782f4b744c78567a4555655a3647446e4f42467454496d37676d6f5774395674306d6a66494879637a5470707650506172480a594a724c4e514a71386e3145513855454a47746e3379794a702b454f3471776a41764e646e754865536664683637476b5830334f7a6443304c5666334b31766a0a6d6b302f7668647a734e764a38354c344f7330416c5a7475757a425930584a6b793363746b7763436759454168774d4b735056516157425a5a786179797554750a435842786f73684e666b4d472f4d745864694a56484c4e75584c67686574446c6a71586332504d49504654422b6f655571484e58493943736e687369576276530a7a7a344f58592b4c5a594b2f614e4c414b3465794362655770666f50486971307a76717338446549465962746b6e544552636d4e7950362f64507a7a46654d340a7a3947706579744b33387157674a3056326c59446f4730436759454130732f5a57463341597057712f7445556f7a356a366c64665036526665634431707758680a763464454845624f6f576549615566467277484f4a30307259663045794a77304f78596e6b524f70763775616566346d4c6f5a4e2b4f68426e64696736782f370a763159795853667736646377496847767674683544556f6b7a756e384d6c693163707a38344f46336959527466354779536f30767157704641767a2b673761650a2b676a68354d38436759423239716e794e4b48617432555571433539434e626564615a5347534b3242764f66376537776247784338757a50307a3556434465750a3457314d65542b79316e6d424b747152686848487336744149646a684e5454653953654c4e5331486365727467385652464a5a7269303830394e70712f5632530a746b4b4a4341394e566d527a482f5a324a7341746164777a65677369623776684333672b415a64415834534c395647777742467a75773d3d0a2d2d2d2d2d454e44205253412050524956415445204b45592d2d2d2d2d0a");
            int account = 15;
            string user = "test";
            string pass = "test";
            int id = 333;
            var response = instance.SearchByAPIID(token, account, user, pass, id);
            Assert.IsInstanceOf<Transaction> (response, "response is Transaction");
        }
        
        /// <summary>
        /// Test SearchByContent
        /// </summary>
        [Test]
        public void SearchByContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? account = null;
            //string user = null;
            //string pass = null;
            //string content = null;
            //var response = instance.SearchByContent(token, account, user, pass, content);
            //Assert.IsInstanceOf<Transaction> (response, "response is Transaction");
        }
        
        /// <summary>
        /// Test SearchByHash
        /// </summary>
        [Test]
        public void SearchByHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? account = null;
            //string user = null;
            //string pass = null;
            //string hash = null;
            //var response = instance.SearchByHash(token, account, user, pass, hash);
            //Assert.IsInstanceOf<Transaction> (response, "response is Transaction");
        }
        
    }

}
